"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[419],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),f=a,d=c["".concat(l,".").concat(f)]||c[f]||m[f]||i;return n?r.createElement(d,s(s({ref:t},u),{},{components:n})):r.createElement(d,s({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3465:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={description:"HeyVL's expressions evaluate to a value in a state.",sidebar_position:3},s="Expressions",o={unversionedId:"heyvl/expressions",id:"heyvl/expressions",title:"Expressions",description:"HeyVL's expressions evaluate to a value in a state.",source:"@site/docs/heyvl/expressions.md",sourceDirName:"heyvl",slug:"/heyvl/expressions",permalink:"/docs/heyvl/expressions",draft:!1,editUrl:"https://github.com/moves-rwth/caesar/tree/main/website/docs/heyvl/expressions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"HeyVL's expressions evaluate to a value in a state.",sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Statements",permalink:"/docs/heyvl/statements"},next:{title:"Domains, Uninterpreted Functions, and Axioms",permalink:"/docs/heyvl/domains"}},l={},p=[{value:"If-Then-Else",id:"if-then-else",level:2},{value:"Let",id:"let",level:2},{value:"Quantifiers",id:"quantifiers",level:2},{value:"Triggers",id:"triggers",level:3}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"expressions"},"Expressions"),(0,a.kt)("p",null,"For now, expressions are sparsely documented.\nWe refer to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/moves-rwth/caesar/blob/main/src/front/parser/grammar.lalrpop"},(0,a.kt)("inlineCode",{parentName:"a"},"src/front/parser/grammar.lalrpop"))," for now for an exhaustive grammar for the complete language.\nIn ",(0,a.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/2309.07781.pdf#page=5"},"our paper on Caesar (cf. Section 2)"),", we give a formal semantics for ",(0,a.kt)("em",{parentName:"p"},"HeyLo"),", our logic for reasoning about expected values.\nCaesar's expressions are a superset of HeyLo."),(0,a.kt)("h2",{id:"if-then-else"},"If-Then-Else"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ite")," built-in function allows to choose one of two expressions based on the result of a Boolean expression.\nFor example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"var x: UInt = ite(true, 32, 64);\n")),(0,a.kt)("p",null,"The first parameter is the Boolean expression.\nIf it evaluates to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", the result of evaluating the second expression is returned.\nOtherwise, the third expression is evaluated."),(0,a.kt)("h2",{id:"let"},"Let"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"let")," expressions enable the declaration of local variables within an expression.\nFor example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"var x: UInt = let(b, true, ite(b, 32, 64));\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"let")," expression creates a new local variable ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," and sets its value to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),".\nThis variable ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," is available within the ",(0,a.kt)("inlineCode",{parentName:"p"},"let")," expression's third argument."),(0,a.kt)("p",null,"In contrast to variable declaration statements using ",(0,a.kt)("inlineCode",{parentName:"p"},"var"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"let")," expressions do not require type annotations.\nThe type of the variable is inferred from the second expression."),(0,a.kt)("h2",{id:"quantifiers"},"Quantifiers"),(0,a.kt)("p",null,"HeyVL features Boolean and quantitative quantifiers: ",(0,a.kt)("inlineCode",{parentName:"p"},"forall"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"exists"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"inf"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"sup"),".\nFor example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"forall x: Int, y: UInt. x == y || x != y\n")),(0,a.kt)("h3",{id:"triggers"},"Triggers"),(0,a.kt)("p",null,"We also support ",(0,a.kt)("em",{parentName:"p"},"triggers")," for quantifiers via annotations.\nThey are ",(0,a.kt)("em",{parentName:"p"},"patterns")," that will instruct the SMT solver to instantiate quantifiers if the pattern is found in the current list of terms it maintains.\nFor example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"forall list: []Int @trigger(len(list)). len(list) >= 0\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Multi-patterns")," are also supported, by writing a comma-separated list inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"@trigger")," annotation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"forall list: []Int @trigger(len(list), len(list)). len(list) >= 0\n")),(0,a.kt)("p",null,"For more information on how triggers/patterns work in general, see the ",(0,a.kt)("a",{parentName:"p",href:"https://microsoft.github.io/z3guide/docs/logic/Quantifiers/#patterns"},"Z3 User Guide")," and the ",(0,a.kt)("a",{parentName:"p",href:"https://dafny.org/latest/DafnyRef/DafnyRef#sec-trigger"},"Dafny documentation"),"."))}m.isMDXComponent=!0}}]);