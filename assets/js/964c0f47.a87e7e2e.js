"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[5035],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},b=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),b=r,m=d["".concat(s,".").concat(b)]||d[b]||c[b]||a;return n?i.createElement(m,o(o({ref:t},u),{},{components:n})):i.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}b.displayName="MDXCreateElement"},5861:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const a={sidebar_position:4},o="Distribution Expressions",l={unversionedId:"stdlib/distributions",id:"stdlib/distributions",title:"Distribution Expressions",description:"Caesar supports a limited number of probability distributions as built-ins.",source:"@site/docs/stdlib/distributions.md",sourceDirName:"stdlib",slug:"/stdlib/distributions",permalink:"/docs/stdlib/distributions",draft:!1,editUrl:"https://github.com/moves-rwth/caesar/tree/main/website/docs/stdlib/distributions.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Lists",permalink:"/docs/stdlib/lists"},next:{title:"Proof Rules",permalink:"/docs/proof-rules/"}},s={},p=[{value:"Bernoulli",id:"bernoulli",level:2},{value:"Constant-only with Odds",id:"constant-only-with-odds",level:3},{value:"Symbolic with Probabilities",id:"symbolic-with-probabilities",level:3},{value:"Uniform",id:"uniform",level:2},{value:"Binomial",id:"binomial",level:2},{value:"Hypergeometric",id:"hypergeometric",level:2}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"distribution-expressions"},"Distribution Expressions"),(0,r.kt)("p",null,"Caesar supports a limited number of probability distributions as built-ins.\nThey are allowed as the right-hand side of an assignment, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"x = ber(1, 1);"),".\nDistribution expressions are not allowed to occur nested inside expressions."),(0,r.kt)("p",null,"All distribution expressions except for ",(0,r.kt)("inlineCode",{parentName:"p"},"flip")," take ",(0,r.kt)("em",{parentName:"p"},"literal")," arguments, i.e. numbers.\nExpressions such as ",(0,r.kt)("inlineCode",{parentName:"p"},"1+x")," or even ",(0,r.kt)("inlineCode",{parentName:"p"},"1+1")," are not supported as arguments."),(0,r.kt)("h2",{id:"bernoulli"},"Bernoulli"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Bernoulli_distribution"},"Bernoulli distribution"),"."),(0,r.kt)("h3",{id:"constant-only-with-odds"},"Constant-only with Odds"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-heyvl"},"proc ber(pa: UInt, pb: UInt) -> (r: Bool)\n")),(0,r.kt)("p",null,"This version takes two ",(0,r.kt)("em",{parentName:"p"},"odds"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"ber(pa, pb)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," with probability ",(0,r.kt)("inlineCode",{parentName:"p"},"pa/(pa+pb)")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," with probability ",(0,r.kt)("inlineCode",{parentName:"p"},"pb/(pa+pb)"),"."),(0,r.kt)("p",null,"Formally: ",(0,r.kt)("inlineCode",{parentName:"p"},"vc[x = ber(pa, pb)](\u03c6) = (pa/(pa+pb)) * \u03c6[x/true] + (pb/(pa+pb)) * \u03c6[x/false]"),"."),(0,r.kt)("small",null,"Note that calls with ",(0,r.kt)("code",null,"pa+pb = 0")," will result in a constant zero expectation."),(0,r.kt)("h3",{id:"symbolic-with-probabilities"},"Symbolic with Probabilities"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-heyvl"},"proc flip(p: UReal) -> (r: Bool)\n")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," with probability ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," with probability ",(0,r.kt)("inlineCode",{parentName:"p"},"1-p"),".\nNote: if ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," is not a valid probability (not in the range ",(0,r.kt)("inlineCode",{parentName:"p"},"[0,1]"),"), then the result of this distribution is undefined!"),(0,r.kt)("p",null,"This distribution accepts symbolic parameters (not just constants)."),(0,r.kt)("h2",{id:"uniform"},"Uniform"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-heyvl"},"proc unif(a: UInt, b: UInt) -> (r: UInt)\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Discrete_uniform_distribution"},"uniform distribution")," returns the values in the closed interval ",(0,r.kt)("inlineCode",{parentName:"p"},"[a,b]")," with uniform probability."),(0,r.kt)("p",null,"Note that calls with ",(0,r.kt)("inlineCode",{parentName:"p"},"a <= b")," will result in a constant zero expectation."),(0,r.kt)("h2",{id:"binomial"},"Binomial"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-heyvl"},"proc binom(n: UInt, pa: UInt, pb: UInt) -> (r: UInt)\n")),(0,r.kt)("p",null,"Returns values ",(0,r.kt)("inlineCode",{parentName:"p"},"r")," according to the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Binomial_distribution"},"binomial distribution")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," is the number of trials, ",(0,r.kt)("inlineCode",{parentName:"p"},"pa")," are the odds of success and ",(0,r.kt)("inlineCode",{parentName:"p"},"pb")," are the odds of failure."),(0,r.kt)("h2",{id:"hypergeometric"},"Hypergeometric"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-heyvl"},"proc hyper(pN: UInt, k: UInt, pn: UInt) -> (r: UInt)\n")),(0,r.kt)("p",null,"Return values according to the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hypergeometric_distribution"},"hypergeometric distribution")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"pN")," is the population size, ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," is the number of success states in the population and ",(0,r.kt)("inlineCode",{parentName:"p"},"pn")," is the number of draws.\nThe result ",(0,r.kt)("inlineCode",{parentName:"p"},"r")," is the number of observed successes, weighted by its probability."))}c.isMDXComponent=!0}}]);