"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[8773],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return t?o.createElement(k,i(i({ref:n},c),{},{components:t})):o.createElement(k,i({ref:n},c))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2472:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const a={title:"Loop Unrolling",description:"Loop unrolling, also known as bounded model checking.",sidebar_position:2},i="Loop Unrolling (aka Bounded Model Checking)",l={unversionedId:"proof-rules/unrolling",id:"proof-rules/unrolling",title:"Loop Unrolling",description:"Loop unrolling, also known as bounded model checking.",source:"@site/docs/proof-rules/unrolling.md",sourceDirName:"proof-rules",slug:"/proof-rules/unrolling",permalink:"/docs/proof-rules/unrolling",draft:!1,editUrl:"https://github.com/moves-rwth/caesar/tree/main/website/docs/proof-rules/unrolling.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Loop Unrolling",description:"Loop unrolling, also known as bounded model checking.",sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Induction and k-Induction",permalink:"/docs/proof-rules/induction"},next:{title:"\u03c9-Invariants",permalink:"/docs/proof-rules/omega-invariants"}},p={},s=[{value:"Usage",id:"usage",level:2},{value:"Example",id:"example",level:2},{value:"Soundness",id:"soundness",level:2}],c={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"loop-unrolling-aka-bounded-model-checking"},"Loop Unrolling (aka Bounded Model Checking)"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Loop unrolling"),", also known as ",(0,r.kt)("em",{parentName:"p"},"bounded model checking"),", replaces a ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," loop by a fixed number of iterations ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Loop unrolling is a technique for ",(0,r.kt)("em",{parentName:"p"},"refuting")," verification, but can make successful verification ",(0,r.kt)("em",{parentName:"p"},"unsound"),".\nThe encodings approximate in the opposite direction to the HeyVL context (",(0,r.kt)("inlineCode",{parentName:"p"},"proc"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"coproc"),").\nProceed very carefully.")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," loop is annotated by the ",(0,r.kt)("inlineCode",{parentName:"p"},"@unroll(k, terminator)")," annotation where ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," is a number literal and ",(0,r.kt)("inlineCode",{parentName:"p"},"terminator")," is an expression of type ",(0,r.kt)("inlineCode",{parentName:"p"},"EUReal"),"."),(0,r.kt)("p",null,"Usually, one chooses the ",(0,r.kt)("inlineCode",{parentName:"p"},"terminator")," to encode the loop unrolling such that it"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"over-approximates greatest fixed-point semantics when in lower-bound contexts (",(0,r.kt)("inlineCode",{parentName:"li"},"procs"),");",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"commonly ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," for the one-bounded wlp semantics,"),(0,r.kt)("li",{parentName:"ul"},"or ",(0,r.kt)("inlineCode",{parentName:"li"},"\\infty")," for the unbounded expectation-based semantics."))),(0,r.kt)("li",{parentName:"ul"},"under-approximates least fixed-point semantics when in upper-bound contexts (",(0,r.kt)("inlineCode",{parentName:"li"},"coprocs"),");",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"commonly ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," for expectation-based semantics (wp, ert).")))),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"#soundness"},"section on soundness")," below."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"In the following example, we use loop unrolling to ",(0,r.kt)("em",{parentName:"p"},"under-approximate")," least fixed-point semantics in an ",(0,r.kt)("em",{parentName:"p"},"upper-bound context")," (",(0,r.kt)("inlineCode",{parentName:"p"},"coproc"),").\nThis means we know that if verification of an upper bound ",(0,r.kt)("em",{parentName:"p"},"fails"),", then it cannot be a valid upper bound.\nOn the other hand, if verification succeeds, then we know nothing!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-heyvl"},"coproc geo1_bmc(init_c: UInt) -> (c: UInt)\n    pre init_c + 0.99\n    post c\n{\n    c = init_c\n    var cont: Bool = true\n    @bmc(12, 0) // k = 12, terminator = 0\n    while cont {\n        var prob_choice: Bool = flip(0.5)\n        if prob_choice { cont = false } else { c = c + 1 }\n    }\n}\n")),(0,r.kt)("p",null,"It is replaced by its unfolding, with an ",(0,r.kt)("inlineCode",{parentName:"p"},"assert 0")," at the end of the ",(0,r.kt)("inlineCode",{parentName:"p"},"k = 12")," loop iterations are exceeded."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-heyvl"},"if cont {\n    ... body ...\n    if cont {\n        ... body ...\n        if cont {\n            ... more unfoldings ...\n                assert 0\n        }\n    }   \n}\n")),(0,r.kt)("p",null,"Trying to verify ",(0,r.kt)("inlineCode",{parentName:"p"},"geo1_bmc")," will yield a counter-example to verification.\nBecause this is loop unrolling, it is a ",(0,r.kt)("em",{parentName:"p"},"true counter-example")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"init_c + 0.99")," being an upper bound.\nOn the other hand, if you change ",(0,r.kt)("inlineCode",{parentName:"p"},"k = 11"),", then the program verifies.\nBut this tells you nothing about the actual program semantics."),(0,r.kt)("h2",{id:"soundness"},"Soundness"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://link.springer.com/chapter/10.1007/978-3-030-81688-9_25"},(0,r.kt)("em",{parentName:"a"},"Latticed k-Induction with an Application to Probabilistic Programs"))," (CAV 2021) for more information on the theory of ",(0,r.kt)("em",{parentName:"p"},"bounded model checking")," on probabilistic programs."),(0,r.kt)("p",null,"One needs to be very careful in choosing the ",(0,r.kt)("inlineCode",{parentName:"p"},"terminator")," such that ",(0,r.kt)("inlineCode",{parentName:"p"},"@unroll")," actually approximates the correct fixed-point corresponding to the desired semantics (see ",(0,r.kt)("a",{parentName:"p",href:"#usage"},"Usage"),")."),(0,r.kt)("p",null,"Notice that you ",(0,r.kt)("strong",{parentName:"p"},"cannot")," ",(0,r.kt)("em",{parentName:"p"},"under-approximate a greatest fixed-point semantics")," or ",(0,r.kt)("em",{parentName:"p"},"over-approximate a least fixed-point semantics")," with loop unrolling, in contrast to the other proof rules such as ",(0,r.kt)("a",{parentName:"p",href:"/docs/proof-rules/induction"},"induction"),"."))}d.isMDXComponent=!0}}]);