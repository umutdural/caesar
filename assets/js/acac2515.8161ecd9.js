"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[696],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||r;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8257:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:6},o="The Caesar CLI",l={unversionedId:"caesar",id:"caesar",title:"The Caesar CLI",description:"The caesar verifier takes a HeyVL program as input and tries to determine whether it verifies.",source:"@site/docs/caesar.md",sourceDirName:".",slug:"/caesar",permalink:"/docs/caesar",draft:!1,editUrl:"https://github.com/moves-rwth/caesar/tree/main/website/docs/caesar.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docsSidebar",previous:{title:"Positive Almost-Sure Termination",permalink:"/docs/proof-rules/past"},next:{title:"pGCL Frontend",permalink:"/docs/pgcl"}},s={},p=[{value:"Benchmarks",id:"benchmarks",level:2},{value:"Optimizations &amp; Alternative Implementations",id:"optimizations--alternative-implementations",level:2},{value:"Command-Line Options",id:"command-line-options",level:3},{value:"Compilation Options",id:"compilation-options",level:3}],m={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"the-caesar-cli"},"The Caesar CLI"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"caesar")," verifier takes a HeyVL program as input and tries to determine whether it ",(0,i.kt)("em",{parentName:"p"},"verifies"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Compile")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"caesar")," binary with ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo build --release"),".\nThe executable can be found at ",(0,i.kt)("inlineCode",{parentName:"p"},"target/release/caesar"),".\nIn the following, we just write ",(0,i.kt)("inlineCode",{parentName:"p"},"caesar")," for the executable.\nOmit ",(0,i.kt)("inlineCode",{parentName:"p"},"--release")," for the a binary with less optimizations; the result will be in ",(0,i.kt)("inlineCode",{parentName:"p"},"target/debug/caesar"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Print help:"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"caesar --help"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Verify HeyVL files:"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"caesar file1.heyvl file2.heyvl ..."),"\nAdding ",(0,i.kt)("inlineCode",{parentName:"p"},"--raw")," indicates that input files consist only of a sequence ",(0,i.kt)("a",{parentName:"p",href:"/docs/heyvl/statements"},"HeyVL statements")," and that no declarations such as procedures are expected."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Timeouts and memory limits:"),"\nSet a timeout of 60 seconds using ",(0,i.kt)("inlineCode",{parentName:"p"},"--timeout 60"),".\nSet a memory limit of 16000 megabytes with ",(0,i.kt)("inlineCode",{parentName:"p"},"--mem 16000"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Print tracing messages:"),"\nCaesar uses the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tokio-rs/tracing"},(0,i.kt)("inlineCode",{parentName:"a"},"tracing")," library")," to print (debugging) information during its operation.\nSet the ",(0,i.kt)("inlineCode",{parentName:"p"},"RUST_LOG")," environment variable to specify a filter, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},'export RUST_LOG="caesar=debug"')," or ",(0,i.kt)("inlineCode",{parentName:"p"},'export RUST_LOG="caesar::smt=trace"'),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Print intermediate data:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"With the ",(0,i.kt)("inlineCode",{parentName:"li"},"--print-parsed")," flag, Caesar pretty-prints the HeyVL code after parsing."),(0,i.kt)("li",{parentName:"ul"},"With the ",(0,i.kt)("inlineCode",{parentName:"li"},"--print-core")," flag, Caesar prints the HeyVL code after parsing, type-checking, and desugaring."),(0,i.kt)("li",{parentName:"ul"},"With the ",(0,i.kt)("inlineCode",{parentName:"li"},"--print-theorem")," flag, Caesar prints the theorem that is encoded into SMT."),(0,i.kt)("li",{parentName:"ul"},"With the ",(0,i.kt)("inlineCode",{parentName:"li"},"--print-smt")," flag, Caesar prints the SMT-LIB query for each verification task. You can also use ",(0,i.kt)("inlineCode",{parentName:"li"},"--smt-dir DIR")," with a directory ",(0,i.kt)("inlineCode",{parentName:"li"},"DIR")," to have Caesar write the SMT-LIB queries to files in ",(0,i.kt)("inlineCode",{parentName:"li"},"DIR"),".")),(0,i.kt)("h2",{id:"benchmarks"},"Benchmarks"),(0,i.kt)("p",null,"The following command checks all examples that we know to work.\nIt completes in about 20s on my machine."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'export RUST_LOG="caesar=trace"\ncd pgcl/examples-heyvl\ncargo run --release  -- --raw unif_gen1.heyvl rabin1.heyvl rabin2.heyvl brp1.heyvl geo1.heyvl\n')),(0,i.kt)("p",null,"You can run the benchmark set with evaluations by executing ",(0,i.kt)("inlineCode",{parentName:"p"},"fish run-benchmarks.fish")," (",(0,i.kt)("a",{parentName:"p",href:"https://fishshell.com/"},"fish shell")," is required)."),(0,i.kt)("p",null,"One possible output of ",(0,i.kt)("inlineCode",{parentName:"p"},'fish run-benchmarks.fish | column -ts ","')," is the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Name             Result  Total Time  VCgen Time  SAT Check Time\nbrp1.heyvl       IND     1.54s       0.02s       1.2s\nbrp2.heyvl       OOM     17.39s\nbrp3.heyvl       OOM     17.29s\nfail-geo1.heyvl  REF     0.18s       0s          0.03s\ngeo1.heyvl       IND     0.2s        0s          0.04s\nlinear01.heyvl   IND     0.19s       0s          0.02s\nrabin1.heyvl     IND     0.5s        0s          0.03s\nrabin2.heyvl     IND     13.95s      0.23s       10.1s\nunif_gen1.heyvl  IND     6.97s       0.02s       6.61s\nunif_gen2.heyvl  TO      0.52s\nunif_gen3.heyvl  TO      0.48s\nunif_gen4.heyvl  OOM     17.54s\n")),(0,i.kt)("h2",{id:"optimizations--alternative-implementations"},"Optimizations & Alternative Implementations"),(0,i.kt)("p",null,"By default, Caesar uses a set of optimizations to speed up validity checking of verification conditions.\nYou can experiment with them by disabling them and choosing between alternative implementations of some algorithms."),(0,i.kt)("h3",{id:"command-line-options"},"Command-Line Options"),(0,i.kt)("p",null,"See ",(0,i.kt)("inlineCode",{parentName:"p"},"--help")," for more detailed information."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Disabling quantifier elimination: ",(0,i.kt)("inlineCode",{parentName:"li"},"--no-qelim"),"."),(0,i.kt)("li",{parentName:"ul"},"Strict verification condition unfolding: ",(0,i.kt)("inlineCode",{parentName:"li"},"--strict"),"."),(0,i.kt)("li",{parentName:"ul"},"Enable e-graph optimization: ",(0,i.kt)("inlineCode",{parentName:"li"},"--egraph"),". The result is currently not used for the SMT encoding.")),(0,i.kt)("h3",{id:"compilation-options"},"Compilation Options"),(0,i.kt)("p",null,"Most of Caesar's behaviour can be changed with command-line flags, but there are three possible SMT encodings of the ",(0,i.kt)("inlineCode",{parentName:"p"},"EUReal")," type which must be chosen from at compile time."),(0,i.kt)("p",null,"Compile with ",(0,i.kt)("inlineCode",{parentName:"p"},"--features datatype-eureal")," to build an executable that encodes ",(0,i.kt)("inlineCode",{parentName:"p"},"EUReal")," values using SMT-LIB datatypes instead of an encoding that uses a Boolean and a Real number directly.\nOur experiments have shown that this is usually slower."),(0,i.kt)("p",null,"You can also compile with ",(0,i.kt)("inlineCode",{parentName:"p"},"--features datatype-eureal-funcs")," to use the datatype SMT-LIB encoding where additionally implementations of multiplications, additions, and less-than-or-equal relations are encoded as SMT-LIB functions.\nThis is the slowest encoding, but it's the easiest to read."))}u.isMDXComponent=!0}}]);